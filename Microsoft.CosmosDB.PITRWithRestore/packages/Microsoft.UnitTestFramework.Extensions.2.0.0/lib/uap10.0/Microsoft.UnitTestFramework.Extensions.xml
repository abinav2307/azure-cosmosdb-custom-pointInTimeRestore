<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.UnitTestFramework.Extensions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter">
            <summary>
            Represents support for asserting unit tests.
            </summary>
            <remarks>This class exposes all of the methods provided by <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert"/>. All other assertion
            extensions are expected to be typically provided by defining extension methods.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.Object,System.Object)">
            <summary>Verifies that two specified objects are equal. The assertion fails if the objects are not equal.</summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual``1(``0,``0)">
            <summary>Verifies that two specified generic type data are equal. The assertion fails if they are not equal.</summary>
            <param name="expected">The first generic type data to compare. This is the generic type data the unit test expects.</param>
            <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of expected value.</typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.Double,System.Double,System.Double)">
            <summary>Verifies that two specified doubles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other.</summary>
            <param name="expected">The first double to compare. This is the double the unit test expects.</param>
            <param name="actual">The second double to compare. This is the double the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.Single,System.Single,System.Single)">
            <summary>Verifies that two specified singles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other.</summary>
            <param name="expected">The first single to compare. This is the single the unit test expects.</param>
            <param name="actual">The second single to compare. This is the single the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.Object,System.Object,System.String)">
            <summary>Verifies that two specified objects are equal. The assertion fails if the objects are not equal. Displays a message if the assertion fails.</summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.String,System.String,System.Boolean)">
            <summary>Verifies that two specified strings are equal, ignoring case or not as specified. The assertion fails if they are not equal.</summary>
            <param name="expected">The first string to compare. This is the string the unit test expects.</param>
            <param name="actual">The second string to compare. This is the string the unit test produced.</param>
            <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual``1(``0,``0,System.String)">
            <summary>Verifies that two specified generic type data are equal. The assertion fails if they are not equal. Displays a message if the assertion fails.</summary>
            <param name="expected">The first generic type data to compare. This is the generic type data the unit test expects.</param>
            <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of expected value.</typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>Verifies that two specified doubles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails.</summary>
            <param name="expected">The first double to compare. This is the double the unit test expects.</param>
            <param name="actual">The second double to compare. This is the double the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>Verifies that two specified singles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails.</summary>
            <param name="expected">The first single to compare. This is the single the unit test expects.</param>
            <param name="actual">The second single to compare. This is the single the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>Verifies that two specified objects are equal. The assertion fails if the objects are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>Verifies that two specified strings are equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are not equal.</summary>
            <param name="expected">The first string to compare. This is the string the unit test expects.</param>
            <param name="actual">The second string to compare. This is the string the unit test produced.</param>
            <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>Verifies that two specified strings are equal, ignoring case or not as specified. The assertion fails if they are not equal. Displays a message if the assertion fails.</summary>
            <param name="expected">The first string to compare. This is the string the unit test expects.</param>
            <param name="actual">The second string to compare. This is the string the unit test produced.</param>
            <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual``1(``0,``0,System.String,System.Object[])">
            <summary>Verifies that two specified generic type data are equal. The assertion fails if they are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="expected">The first generic type data to compare. This is the generic type data the unit test expects.</param>
            <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of expected value.</typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>Verifies that two specified doubles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="expected">The first double to compare. This is the double the unit tests expects.</param>
            <param name="actual">The second double to compare. This is the double the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>Verifies that two specified singles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="expected">The first single to compare. This is the single the unit test expects.</param>
            <param name="actual">The second single to compare. This is the single the unit test produced.</param>
            <param name="delta">The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
            <summary>Verifies that two specified strings are equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are not equal. Displays a message if the assertion fails.</summary>
            <param name="expected">The first string to compare. This is the string the unit test expects.</param>
            <param name="actual">The second string to compare. This is the string the unit test produced.</param>
            <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>Verifies that two specified strings are equal, ignoring case or not as specified. The assertion fails if they are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="expected">The first string to compare. This is the string the unit test expects.</param>
            <param name="actual">The second string to compare. This is the string the unit test produced.</param>
            <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>Verifies that two specified strings are equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="expected">The first string to compare. This is the string the unit test expects.</param>
            <param name="actual">The second string to compare. This is the string the unit test produced.</param>
            <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.Object,System.Object)">
            <summary>Verifies that two specified objects are not equal. The assertion fails if the objects are equal.</summary>
            <param name="notExpected">The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual``1(``0,``0)">
            <summary>Verifies that two specified generic type data are not equal. The assertion fails if they are equal.</summary>
            <param name="notExpected">The first generic type data to compare. This is the generic type data the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of expected value.</typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.Double,System.Double,System.Double)">
            <summary>Verifies that two specified doubles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other.</summary>
            <param name="notExpected">The first double to compare. This is the double the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second double to compare. This is the double the unit test produced.</param>
            <param name="delta">The required inaccuracy. The assertion fails only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.Single,System.Single,System.Single)">
            <summary>Verifies that two specified singles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other.</summary>
            <param name="notExpected">The first single to compare. This is the single the unit test expects.</param>
            <param name="actual">The second single to compare. This is the single the unit test produced.</param>
            <param name="delta">The required inaccuracy. The assertion will fail only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>Verifies that two specified objects are not equal. The assertion fails if the objects are equal. Displays a message if the assertion fails.</summary>
            <param name="notExpected">The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.String,System.String,System.Boolean)">
            <summary>Verifies that two specified strings are not equal, ignoring case or not as specified. The assertion fails if they are equal.</summary>
            <param name="notExpected">The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second string to compare. This is the string the unit test produced.</param>
            <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual``1(``0,``0,System.String)">
            <summary>Verifies that two specified generic type data are not equal. The assertion fails if they are equal. Displays a message if the assertion fails.</summary>
            <param name="notExpected">The first generic type data to compare. This is the generic type data the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of expected value.</typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>Verifies that two specified doubles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails.</summary>
            <param name="notExpected">The first double to compare. This is the double the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second double to compare. This is the double the unit test produced.</param>
            <param name="delta">The required inaccuracy. The assertion fails only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>Verifies that two specified singles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails.</summary>
            <param name="notExpected">The first single to compare. This is the single the unit test expects.</param>
            <param name="actual">The second single to compare. This is the single the unit test produced.</param>
            <param name="delta">The required inaccuracy. The assertion will fail only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>Verifies that two specified objects are not equal. The assertion fails if the objects are equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="notExpected">The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>Verifies that two specified strings are not equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are equal.</summary>
            <param name="notExpected">The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second string to compare. This is the string the unit test produced.</param>
            <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>Verifies that two specified strings are not equal, ignoring case or not as specified. The assertion fails if they are equal. Displays a message if the assertion fails.</summary>
            <param name="notExpected">The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second string to compare. This is the string the unit test produced.</param>
            <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual``1(``0,``0,System.String,System.Object[])">
            <summary>Verifies that two specified generic type data are not equal. The assertion fails if they are equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="notExpected">The first generic type data to compare. This is the generic type data the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second generic type data to compare. This is the generic type data the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of expected value.</typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>Verifies that two specified doubles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="notExpected">The first double to compare. This is the double the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second double to compare. This is the double the unit test produced.</param>
            <param name="delta">The required inaccuracy. The assertion will fail only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>Verifies that two specified singles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="notExpected">The first single to compare. This is the single the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second single to compare. This is the single the unit test produced.</param>
            <param name="delta">The required inaccuracy. The assertion will fail only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
            <summary>Verifies that two specified strings are not equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are equal. Displays a message if the assertion fails.</summary>
            <param name="notExpected">The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second string to compare. This is the string the unit test produced.</param>
            <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>Verifies that two specified strings are not equal, ignoring case or not as specified. The assertion fails if they are equal. Displays a message if the assertion fails, and applies the specified formatting to it. </summary>
            <param name="notExpected">The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second string to compare. This is the string the unit test produced.</param>
            <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>Verifies that two specified strings are not equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="notExpected">The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second string to compare. This is the string the unit test produced.</param>
            <param name="ignoreCase">A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotSame(System.Object,System.Object)">
            <summary>Verifies that two specified object variables refer to different objects. The assertion fails if they refer to the same object.</summary>
            <param name="notExpected">The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> refers to the same object as <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotSame(System.Object,System.Object,System.String)">
            <summary>Verifies that two specified object variables refer to different objects. The assertion fails if they refer to the same object. Displays a message if the assertion fails. </summary>
            <param name="notExpected">The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> refers to the same object as <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>Verifies that two specified object variables refer to different objects. The assertion fails if they refer to the same object. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="notExpected">The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="notExpected" /> refers to the same object as <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreSame(System.Object,System.Object)">
            <summary>Verifies that two specified object variables refer to the same object. The assertion fails if they refer to different objects.</summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> does not refer to the same object as <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreSame(System.Object,System.Object,System.String)">
            <summary>Verifies that two specified object variables refer to the same object. The assertion fails if they refer to different objects. Displays a message if the assertion fails.</summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> does not refer to the same object as <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>Verifies that two specified object variables refer to the same object. The assertion fails if they refer to different objects. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="expected">The first object to compare. This is the object the unit test expects.</param>
            <param name="actual">The second object to compare. This is the object the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected" /> does not refer to the same object as <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.Fail">
            <summary>Fails the assertion without checking any conditions.</summary>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Always thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.Fail(System.String)">
            <summary>Fails the assertion without checking any conditions. Displays a message.</summary>
            <param name="message">A message to display. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Always thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.Fail(System.String,System.Object[])">
            <summary>Fails the assertion without checking any conditions. Displays a message, and applies the specified formatting to it.</summary>
            <param name="message">A message to display. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Always thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.Inconclusive">
            <summary>Indicates that the assertion cannot be verified.</summary>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">Always thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.Inconclusive(System.String)">
            <summary>Indicates that the assertion can not be verified. Displays a message.</summary>
            <param name="message">A message to display. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">Always thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.Inconclusive(System.String,System.Object[])">
            <summary>Indicates that an assertion can not be verified. Displays a message, and applies the specified formatting to it.</summary>
            <param name="message">A message to display. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">Always thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsFalse(System.Boolean)">
            <summary>Verifies that the specified condition is false. The assertion fails if the condition is true.</summary>
            <param name="condition">The condition to verify is false.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="condition" /> evaluates to true.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsFalse(System.Boolean,System.String)">
            <summary>Verifies that the specified condition is false. The assertion fails if the condition is true. Displays a message if the assertion fails.</summary>
            <param name="condition">The condition to verify is false.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="condition" /> evaluates to true.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>Verifies that the specified condition is false. The assertion fails if the condition is true. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="condition">The condition to verify is false.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="condition" /> evaluates to true.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsInstanceOfType(System.Object,System.Type)">
            <summary>Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found in the inheritance hierarchy of the object.</summary>
            <param name="value">The object to verify is of <paramref name="expectedType" />.</param>
            <param name="expectedType">The type expected to be found in the inheritance hierarchy of <paramref name="value" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of <paramref name="value" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsInstanceOfType(System.Object,System.Type,System.String)">
            <summary>Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found in the inheritance hierarchy of the object. Displays a message if the assertion fails.</summary>
            <param name="value">The object to verify is of <paramref name="expectedType" />.</param>
            <param name="expectedType">The type expected to be found in the inheritance hierarchy of <paramref name="value" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of <paramref name="value" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="value">The object to verify is of <paramref name="expectedType" />.</param>
            <param name="expectedType">The type expected to be found in the inheritance hierarchy of <paramref name="value" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of <paramref name="value" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsNotInstanceOfType(System.Object,System.Type)">
            <summary>Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found in the inheritance hierarchy of the object.</summary>
            <param name="value">The object to verify is not of <paramref name="wrongType" />.</param>
            <param name="wrongType">The type that should not be found in the inheritance hierarchy of <paramref name="value" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value" /> is not null and <paramref name="wrongType" /> is found in the inheritance hierarchy of <paramref name="value" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsNotInstanceOfType(System.Object,System.Type,System.String)">
            <summary>Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found in the inheritance hierarchy of the object. Displays a message if the assertion fails.</summary>
            <param name="value">The object to verify is not of <paramref name="wrongType" />.</param>
            <param name="wrongType">The type that should not be found in the inheritance hierarchy of <paramref name="value" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results. </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value" /> is not null and <paramref name="wrongType" /> is found in the inheritance hierarchy of <paramref name="value" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsNotInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="value">The object to verify is not of <paramref name="wrongType" />.</param>
            <param name="wrongType">The type that should not be found in the inheritance hierarchy of <paramref name="value" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results. </param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value" /> is not null and <paramref name="wrongType" /> is found in the inheritance hierarchy of <paramref name="value" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsNotNull(System.Object)">
            <summary>Verifies that the specified object is not null. The assertion fails if it is null.</summary>
            <param name="value">The object to verify is not null.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsNotNull(System.Object,System.String)">
            <summary>Verifies that the specified object is not null. The assertion fails if it is null. Displays a message if the assertion fails.</summary>
            <param name="value">The object to verify is not null.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>Verifies that the specified object is not null. The assertion fails if it is null. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="value">The object to verify is not null.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsNull(System.Object)">
            <summary>Verifies that the specified object is null. The assertion fails if it is not null.</summary>
            <param name="value">The object to verify is null.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value" /> is not null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsNull(System.Object,System.String)">
            <summary>Verifies that the specified object is null. The assertion fails if it is not null. Displays a message if the assertion fails.</summary>
            <param name="value">The object to verify is null.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value" /> is not null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsNull(System.Object,System.String,System.Object[])">
            <summary>Verifies that the specified object is null. The assertion fails if it is not null. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="value">The object to verify is null.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value" /> is not null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsTrue(System.Boolean)">
            <summary>Verifies that the specified condition is true. The assertion fails if the condition is false.</summary>
            <param name="condition">The condition to verify is true.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="condition" /> evaluates to false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsTrue(System.Boolean,System.String)">
            <summary>Verifies that the specified condition is true. The assertion fails if the condition is false. Displays a message if the assertion fails.</summary>
            <param name="condition">The condition to verify is true.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="condition" /> evaluates to false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>Verifies that the specified condition is true. The assertion fails if the condition is false. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="condition">The condition to verify is true.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="condition" /> evaluates to false.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AssertParameterIsNotNull``1(``0,System.String)">
            <summary>
            Asserts the specified assertion test parameter is not null.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> to evaluate.</typeparam>
            <param name="parameter">The parameter to evaluate.</param>
            <param name="parameterName">The parameter name.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AssertParameterIsNotNull``1(``0[],System.String)">
            <summary>
            Asserts the specified assertion test parameter is not null.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> to evaluate.</typeparam>
            <param name="parameter">The array parameter to evaluate.</param>
            <param name="parameterName">The parameter name.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter.AssertParameterIsNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Asserts the specified assertion test parameter is not null.
            </summary>
            <typeparam name="T">The nullable <see cref="T:System.Type">type</see> to evaluate.</typeparam>
            <param name="parameter">The <see cref="T:System.Collections.Generic.IEnumerable`1">parameter</see> to evaluate.</param>
            <param name="parameterName">The parameter name.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter">
            <summary>
            Represents support for asserting unit tests.
            </summary>
            <remarks>This class exposes all of the methods provided by <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert"/> as instance methods.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.Contains(System.Collections.ICollection,System.Object)">
            <summary>Verifies that the specified collection contains the specified element. The assertion fails if the element is not found in the collection.</summary>
            <param name="collection">The collection in which to search for the element.</param>
            <param name="element">The element that is expected to be in the collection.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="element" /> is not found in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.Contains(System.Collections.ICollection,System.Object,System.String)">
            <summary>Verifies that the specified collection contains the specified element. The assertion fails if the element is not found in the collection. Displays a message if the assertion fails.</summary>
            <param name="collection">The collection in which to search for the element.</param>
            <param name="element">The element that is expected to be in the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="element" /> is not found in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.Contains(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>Verifies that the specified collection contains the specified element. The assertion fails if the element is not found in the collection. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="collection">The collection in which to search for the element.</param>
            <param name="element">The element that is expected to be in the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="element" /> is not found in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.DoesNotContain(System.Collections.ICollection,System.Object)">
            <summary>Verifies that the specified collection does not contain the specified element. The assertion fails if the element is found in the collection.</summary>
            <param name="collection">The collection in which to search for the element.</param>
            <param name="element">The element that is not expected to be in the collection.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="element" /> is found in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.DoesNotContain(System.Collections.ICollection,System.Object,System.String)">
            <summary>Verifies that the specified collection does not contain the specified element. The assertion fails if the element is found in the collection. Displays a message if the assertion fails.</summary>
            <param name="collection">The collection in which to search for the element.</param>
            <param name="element">The element that is not expected to be in the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="element" /> is found in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.DoesNotContain(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>Verifies that the specified collection does not contain the specified element. The assertion fails if the element is found in the collection. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="collection">The collection in which to search for the element.</param>
            <param name="element">The element that is not expected to be in the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="element" /> is found in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AllItemsAreNotNull(System.Collections.ICollection)">
            <summary>Verifies that all items in the specified collection are not null. The assertion fails if any element is null.</summary>
            <param name="collection">The collection in which to search for elements that are null.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element which is null is found in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AllItemsAreNotNull(System.Collections.ICollection,System.String)">
            <summary>Verifies that all items in the specified collection are not null. The assertion fails if any element is null. Displays a message if the assertion fails.</summary>
            <param name="collection">The collection in which to search for elements that are null.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element which is null is found in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AllItemsAreNotNull(System.Collections.ICollection,System.String,System.Object[])">
            <summary>Verifies that all items in the specified collection are not null. The assertion fails if any element is null. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="collection">The collection in which to search for elements that are null.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element which is null is found in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AllItemsAreUnique(System.Collections.ICollection)">
            <summary>Verifies that all items in the specified collection are unique. The assertion fails if any two elements in the collection are equal.</summary>
            <param name="collection">The collection in which to search for duplicate elements.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Two or more equal elements are found in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AllItemsAreUnique(System.Collections.ICollection,System.String)">
            <summary>Verifies that all items in the specified collection are unique. The assertion fails if any two elements in the collection are equal. Displays a message if the assertion fails.</summary>
            <param name="collection">The collection in which to search for duplicate elements.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Two or more equal elements are found in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AllItemsAreUnique(System.Collections.ICollection,System.String,System.Object[])">
            <summary>Verifies that all items in the specified collection are unique. The assertion fails if any two elements in the collection are equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="collection">The collection in which to search for duplicate elements.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Two or more equal elements are found in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>Verifies that the first collection is a subset of the second collection.</summary>
            <param name="subset">The collection expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The collection expected to be a superset of <paramref name="subset" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="subset" /> is not found in <paramref name="superset" /> or an element in <paramref name="subset" /> is not found in <paramref name="superset" /> in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>Verifies that the first collection is a subset of the second collection. Displays a message if the assertion fails.</summary>
            <param name="subset">The collection expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The collection expected to be a superset of <paramref name="subset" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="subset" /> is not found in <paramref name="superset" /> or an element in <paramref name="subset" /> is not found in <paramref name="superset" /> in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>Verifies that the first collection is a subset of the second collection. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="subset">The collection expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The collection expected to be a superset of <paramref name="subset" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="subset" /> is not found in <paramref name="superset" /> or an element in <paramref name="subset" /> is not found in <paramref name="superset" /> in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>Verifies that the first collection is not a subset of the second collection.</summary>
            <param name="subset">The collection not expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The collection not expected to be a superset of <paramref name="subset" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">All elements in <paramref name="subset" /> are found in <paramref name="superset" /> and are found in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>Verifies that the first collection is not a subset of the second collection. Displays a message if the assertion fails.</summary>
            <param name="subset">The collection not expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The collection not expected to be a superset of <paramref name="subset" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">All elements in <paramref name="subset" /> are found in <paramref name="superset" /> and are found in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>Verifies that the first collection is not a subset of the second collection. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="subset">The collection not expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The collection not expected to be a superset of <paramref name="subset" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">All elements in <paramref name="subset" /> are found in <paramref name="superset" /> and are found in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>Verifies that two specified collections are equivalent. The assertion fails if the collections are not equivalent.</summary>
            <param name="expected">The first collection to compare. This contains the elements the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element was found in one of the collections but not in the other.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>Verifies that two specified collections are equivalent. The assertion fails if the collections are not equivalent. Displays a message if the assertion fails.</summary>
            <param name="expected">The first collection to compare. This contains the elements the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element was found in one of the collections but not in the other.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>Verifies that two specified collections are equivalent. The assertion fails if the collections are not equivalent. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="expected">The first collection to compare. This contains the elements the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element was found in one of the collections but not the other.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>Verifies that two specified collections are not equivalent. The assertion fails if the collections are equivalent.</summary>
            <param name="expected">The first collection to compare. This contains the elements the unit test expects to be different from the actual collection.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">The two collections contain the same elements, including the same number of duplicate occurrences of each element.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>Verifies that two specified collections are not equivalent. The assertion fails if the collections are equivalent. Displays a message if the assertion fails.</summary>
            <param name="expected">The first collection to compare. This contains the elements the unit test expects to be different from the actual collection.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">The two collections contain the same elements, including the same number of duplicate occurrences of each element.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>Verifies that two specified collections are not equivalent. The assertion fails if the collections are equivalent. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="expected">The first collection to compare. This contains the elements the unit test expects to be different from the actual collection.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">The two collections contain the same elements, including the same number of duplicate occurrences of each element.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type)">
            <summary>Verifies that all elements in the specified collection are instances of the specified type. The assertion fails if for any element the type is not found in its inheritance hierarchy.</summary>
            <param name="collection">The collection to verify.</param>
            <param name="expectedType">The type expected to be found in the inheritance hierarchy of every element in <paramref name="collection" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="collection" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of all elements  in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String)">
            <summary>Verifies that all elements in the specified collection are instances of the specified type. The assertion fails if there exists one element in the collection for which the specified type is not found in its inheritance hierarchy. Displays a message if the assertion fails.</summary>
            <param name="collection">The collection to verify.</param>
            <param name="expectedType">The type expected to be found in the inheritance hierarchy of every element in <paramref name="collection" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="collection" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of all elements in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String,System.Object[])">
            <summary>Verifies that all elements in the specified collection are instances of the specified type. The assertion fails if there exists one element in the collection for which the specified type is not found in its inheritance hierarchy. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="collection">The collection to verify.</param>
            <param name="expectedType">The type expected to be found in the inheritance hierarchy of every element in <paramref name="collection" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="collection" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of all elements in <paramref name="collection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>Verifies that two specified collections are equal. The assertion fails if the collections are not equal.</summary>
            <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>Verifies that two specified collections are equal. The assertion fails if the collections are not equal. Displays a message if the assertion fails.</summary>
            <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>Verifies that two specified collections are equal. The assertion fails if the collections are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>Verifies that two specified collections are not equal. The assertion fails if the collections are equal.</summary>
            <param name="notExpected">The first collection to compare. This is the collection that the unit test does not expect to match <paramref name="actual" />.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>Verifies that two specified collections are not equal. The assertion fails if the collections are equal. Displays a message if the assertion fails.</summary>
            <param name="notExpected">The first collection to compare. This is the collection that the unit test does not expect to match <paramref name="actual" />.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>Verifies that two specified collections are not equal. The assertion fails if the collections are equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="notExpected">The first collection to compare. This is the collection that the unit test does not expect to match <paramref name="actual" />.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
            <summary>Verifies that two specified collections are equal, using the specified method to compare the values of elements. The assertion fails if the collections are not equal.</summary>
            <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
            <summary>Verifies that two specified collections are equal, using the specified method to compare the values of elements. The assertion fails if the collections are not equal. Displays a message if the assertion fails.</summary>
            <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
            <summary>Verifies that two specified collections are equal, using the specified method to compare the values of elements. The assertion fails if the collections are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="expected">The first collection to compare. This is the collection the unit test expects.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
            <summary>Verifies that two specified collections are not equal, using the specified method to compare the values of elements. The assertion fails if the collections are equal.</summary>
            <param name="notExpected">The first collection to compare. This is the collection that the unit test does not expect to match <paramref name="actual" />.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
            <summary>Verifies that two specified collections are not equal, using the specified method to compare the values of elements. The assertion fails if the collections are equal. Displays a message if the assertion fails.</summary>
            <param name="notExpected">The first collection to compare. This is the collection that the unit test does not expect to match <paramref name="actual" />.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
            <summary>Verifies that two specified collections are not equal, using the specified method to compare the values of elements. The assertion fails if the collections are equal. Displays a message if the assertion fails, and applies the specified formatting to it.</summary>
            <param name="notExpected">The first collection to compare. This is the collection that the unit test does not expect to match <paramref name="actual" />.</param>
            <param name="actual">The second collection to compare. This is the collection the unit test produced.</param>
            <param name="comparer">The compare implementation to use when comparing elements of the collection.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions">
            <summary>
            Provides assertion support for <see cref="T:System.Exception">exceptions</see>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.Verify``1(Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter{``0},System.Func{``0,System.Boolean})">
            <summary>
            Asserts the specified verification on the provided exception.
            </summary>
            <typeparam name="TException">The <see cref="T:System.Type">type</see> of <see cref="T:System.Exception">exception</see> to verify.</typeparam>
            <param name="assert">The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see> to verify.</param>
            <param name="verification">The verification <see cref="T:System.Func`2">function</see>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <remarks>This method can be used to verify post exception results and behaviors such as exception properties.</remarks>
            <example>
    This example illustrates verifying the message of an asserted exception.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name ) => Name = name ?? throw new ArgumentNullException( nameof( name ), "The name cannot be null." );
            
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.ThrowsIfArgumentNull( ( string name ) => new Person( name ) )
                      .Verify( e => e.Message == "The name cannot be null." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.Verify``1(Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter{``0},System.Func{``0,System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts the specified verification on the provided exception.
            </summary>
            <typeparam name="TException">The <see cref="T:System.Type">type</see> of <see cref="T:System.Exception">exception</see> to verify.</typeparam>
            <param name="assert">The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see> to verify.</param>
            <param name="verification">The verification <see cref="T:System.Func`2">function</see>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <remarks>This method can be used to verify post exception results and behaviors such as exception properties.</remarks>
            <example>
    This example illustrates verifying the message of an asserted exception.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name ) => Name = name ?? throw new ArgumentNullException( nameof( name ), "The name cannot be null." );
            
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.ThrowsIfArgumentNull( ( string name ) => new Person( name ) )
                      .Verify( e => e.Message == "The name cannot be null.",
                               "The actual message does not equal the expected message." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.Throws(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Action)">
            <summary>
            Asserts the specified test method throws an exception of any type.
            </summary>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Action" /> representing the test method.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name ) => Name = name ?? throw new ArgumentNullException( nameof( name ), "The name cannot be null." );
            
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.Throws( () => new Person( null ) );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.Throws(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Action,System.String,System.Object[])">
            <summary>
            Asserts the specified test method throws an exception of any type.
            </summary>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Action" /> representing the test method.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name ) => Name = name ?? throw new ArgumentNullException( nameof( name ), "The name cannot be null." );
            
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.Throws( () => new Person( null ), "An exception was expected, but not thrown." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.Throws``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Action)">
            <summary>
            Asserts the specified test method throws an exception of the specified type.
            </summary>
            <typeparam name="TException">The <see cref="T:System.Type" /> of <see cref="T:System.ArgumentException" /> that should be thrown.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Action" /> representing the test method.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name ) => Name = name ?? throw new ArgumentNullException( nameof( name ), "The name cannot be null." );
            
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.Throws<ArgumentNullException>( () => new Person( null ) );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.Throws``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Action,System.String,System.Object[])">
            <summary>
            Asserts the specified test method throws an exception of the specified type.
            </summary>
            <typeparam name="TException">The <see cref="T:System.Type" /> of <see cref="T:System.ArgumentException" /> that should be thrown.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Action" /> representing the test method.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name ) => Name = name ?? throw new ArgumentNullException( nameof( name ), "The name cannot be null." );
            
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.Throws<ArgumentNullException>( () => new Person( null ), "An argument null exception was expected." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsForArgument``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Action,System.String)">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentException">argument exception</see>.
            </summary>
            <typeparam name="TException">The <see cref="T:System.Type">type</see> of <see cref="T:System.ArgumentException" /> to expect.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Action" /> representing the test method.</param>
            <param name="paramName">The name of the parameter expected to throw an exception.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            private string name;
        
            public string Name
            {
                get => name;
                set => name = value ?? throw new ArgumentNullException( "value" );
            }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                var target = new Person();
                Assert.ThrowsForArgument( () => target.Name = null, "value" );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsForArgument``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Action,System.String,System.String,System.Object[])">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentException">argument exception</see>.
            </summary>
            <typeparam name="TException">The <see cref="T:System.Type">type</see> of <see cref="T:System.ArgumentException" /> to expect.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Action" /> representing the test method.</param>
            <param name="paramName">The name of the parameter expected to throw an exception.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            private string name;
        
            public string Name
            {
                get => name;
                set => name = value ?? throw new ArgumentNullException( "value" );
            }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                var target = new Person();
                Assert.ThrowsForArgument( () => target.Name = null, "value", "An exception was expected, but not thrown." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsEmpty(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{System.String}})">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentNullException">argument null exception</see> if the supplied parameter is empty.
            </summary>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception for an empty string.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name )
            {
                if ( string.IsNullOrEmpty( name ) )
                {
                    throw new ArgumentNullException( nameof( name ), "The name cannot be null or empty." );
                }
                
                Name = name;
            }
        
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowEmptyName()
            {
                Assert.ThrowsIfArgumentIsEmpty( name => new Person( name ) );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsEmpty(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{System.String}},System.String,System.Object[])">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentNullException">argument null exception</see> if the supplied parameter is empty.
            </summary>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception for an empty string.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name )
            {
                if ( string.IsNullOrEmpty( name ) )
                {
                    throw new ArgumentNullException( nameof( name ), "The name cannot be null or empty." );
                }
                
                Name = name;
            }
        
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowEmptyName()
            {
                Assert.ThrowsIfArgumentIsEmpty( name => new Person( name ), "An argument null exception was expected." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsEmpty``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{System.String}})">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentException">argument exception</see> if the supplied parameter is empty.
            </summary>
            <typeparam name="TException">The <see cref="T:System.Type">type</see> of <see cref="T:System.ArgumentException" /> to expect.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception for an empty string.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name )
            {
                if ( string.IsNullOrEmpty( name ) )
                {
                    throw new ArgumentNullException( nameof( name ), "The name cannot be null or empty." );
                }
                
                Name = name;
            }
        
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowEmptyName()
            {
                Assert.ThrowsIfArgumentIsEmpty<ArgumentNullException>( name => new Person( name ) );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsEmpty``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{System.String}},System.String,System.Object[])">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentException">argument exception</see> if the supplied parameter is empty.
            </summary>
            <typeparam name="TException">The <see cref="T:System.Type">type</see> of <see cref="T:System.ArgumentException" /> to expect.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception for an empty string.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name )
            {
                if ( string.IsNullOrEmpty( name ) )
                {
                    throw new ArgumentNullException( nameof( name ), "The name cannot be null or empty." );
                }
                
                Name = name;
            }
        
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowEmptyName()
            {
                Assert.ThrowsIfArgumentIsEmpty<ArgumentNullException>( name => new Person( name ), "An argument null exception was expected." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsWhiteSpace(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{System.String}})">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentNullException">argument null exception</see> if the supplied parameter is whitespace.
            </summary>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception for a white space string.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name )
            {
                if ( string.IsNullOrWhiteSpace( name ) )
                {
                    throw new ArgumentNullException( nameof( name ), "The name cannot be null, empty, or white space." );
                }
                
                Name = name;
            }
        
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowWhiteSpaceName()
            {
                Assert.ThrowsIfArgumentIsWhiteSpace( name => new Person( name ) );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsWhiteSpace(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{System.String}},System.String,System.Object[])">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentNullException">argument null exception</see> if the supplied parameter is whitespace.
            </summary>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception for a white space string.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name )
            {
                if ( string.IsNullOrWhiteSpace( name ) )
                {
                    throw new ArgumentNullException( nameof( name ), "The name cannot be null, empty, or white space." );
                }
                
                Name = name;
            }
        
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowWhiteSpaceName()
            {
                Assert.ThrowsIfArgumentIsWhiteSpace( name => new Person( name ), "An argument null exception was expected." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsWhiteSpace``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{System.String}})">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentException">argument exception</see> if the supplied parameter is whitespace.
            </summary>
            <typeparam name="TException">The <see cref="T:System.Type">type</see> of <see cref="T:System.ArgumentException" /> to expect.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception for a white space string.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name )
            {
                if ( string.IsNullOrWhiteSpace( name ) )
                {
                    throw new ArgumentNullException( nameof( name ), "The name cannot be null, empty, or white space." );
                }
                
                Name = name;
            }
        
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowWhiteSpaceName()
            {
                Assert.ThrowsIfArgumentIsWhiteSpace<ArgumentNullException>( name => new Person( name ) );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsWhiteSpace``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{System.String}},System.String,System.Object[])">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentException">argument exception</see> if the supplied parameter is whitespace.
            </summary>
            <typeparam name="TException">The <see cref="T:System.Type">type</see> of <see cref="T:System.ArgumentException" /> to expect.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception for a white space string.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name )
            {
                if ( string.IsNullOrWhiteSpace( name ) )
                {
                    throw new ArgumentNullException( nameof( name ), "The name cannot be null, empty, or white space." );
                }
                
                Name = name;
            }
        
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowWhiteSpaceName()
            {
                Assert.ThrowsIfArgumentIsWhiteSpace<ArgumentNullException>( name => new Person( name ), "An argument null exception was expected." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsNull``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentNullException">argument null exception</see> if the supplied parameter is null.
            </summary>
            <typeparam name="TArg">The <see cref="T:System.Type">type</see> of parameter to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name ) => Name = name ?? throw new ArgumentNullException( nameof( name ), "The name cannot be null." );
            
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.ThrowsIfArgumentIsNull( ( string name ) => new Person( name ) );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsNull``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{``0}},System.String,System.Object[])">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentNullException">argument null exception</see> if the supplied parameter is null.
            </summary>
            <typeparam name="TArg">The <see cref="T:System.Type">type</see> of parameter to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name ) => Name = name ?? throw new ArgumentNullException( nameof( name ), "The name cannot be null." );
            
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.ThrowsIfArgumentIsNull( ( string name ) => new Person( name ), "An exception was expected, but not thrown." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsNull``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentException">argument exception</see> if the supplied parameter is null.
            </summary>
            <typeparam name="TArg">The <see cref="T:System.Type">type</see> of parameter to test.</typeparam>
            <typeparam name="TException">The <see cref="T:System.Type">type</see> of <see cref="T:System.ArgumentException" /> to expect.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name ) => Name = name ?? throw new ArgumentNullException( nameof( name ), "The name cannot be null." );
            
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.ThrowsIfArgumentIsNull<string, ArgumentNullException>( name => new Person( name ) );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsNull``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{``0}},System.String,System.Object[])">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentException">argument exception</see> if the supplied parameter is null.
            </summary>
            <typeparam name="TArg">The <see cref="T:System.Type">type</see> of parameter to test.</typeparam>
            <typeparam name="TException">The <see cref="T:System.Type">type</see> of <see cref="T:System.ArgumentException" /> to expect.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( string name ) => Name = name ?? throw new ArgumentNullException( nameof( name ), "The name cannot be null." );
            
            public string Name { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.ThrowsIfArgumentIsNull<string, ArgumentNullException>( name => new Person( name ), "An argument null exception was expected." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsOutOfRange``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{``0}},``0)">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentOutOfRangeException">argument out of range exception</see> if the supplied parameter is out of range.
            </summary>
            <typeparam name="TArg">The <see cref="T:System.Type">type</see> of parameter to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <param name="value">The <typeparamref name="TArg">value</typeparamref> that should cause the exception to be thrown.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception for an argument that is out of range.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( int id )
            {
                if ( id < 0 )
                {
                    throw new ArgumentOutOfRangeException( "id", id, "The identifier must be greater than zero." );
                }
        
                Id = id;
            }
        
            public int Id { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.ThrowsIfArgumentIsOutOfRange( id => new Person( id ), -1 );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsOutOfRange``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{``0}},``0,System.String,System.Object[])">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentOutOfRangeException">argument out of range exception</see> if the supplied parameter is out of range.
            </summary>
            <typeparam name="TArg">The <see cref="T:System.Type">type</see> of parameter to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <param name="value">The <typeparamref name="TArg">value</typeparamref> that should cause the exception to be thrown.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception for an argument that is out of range.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( int id )
            {
                if ( id < 0 )
                {
                    throw new ArgumentOutOfRangeException( "id", id, "The identifier must be greater than zero." );
                }
        
                Id = id;
            }
        
            public int Id { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.ThrowsIfArgumentIsOutOfRange( id => new Person( id ), -1, "An argument out of range exception was expected." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsOutOfRange``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{``0}},``0)">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentException">argument exception</see> if the supplied parameter is out of range.
            </summary>
            <typeparam name="TArg">The <see cref="T:System.Type">type</see> of parameter to test.</typeparam>
            <typeparam name="TException">The <see cref="T:System.Type">type</see> of <see cref="T:System.ArgumentException" /> to expect.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <param name="value">The <typeparamref name="TArg">value</typeparamref> that should cause the exception to be thrown.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception for an argument that is out of range.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( int id )
            {
                if ( id < 0 )
                {
                    throw new ArgumentOutOfRangeException( "id", id, "The identifier must be greater than zero." );
                }
        
                Id = id;
            }
        
            public int Id { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.ThrowsIfArgumentIsOutOfRange<int, ArgumentOutOfRangeException>( id => new Person( id ), -1 );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserterExtensions.ThrowsIfArgumentIsOutOfRange``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Linq.Expressions.Expression{System.Action{``0}},``0,System.String,System.Object[])">
            <summary>
            Asserts the specified test method throws an <see cref="T:System.ArgumentException">argument exception</see> if the supplied parameter is null.
            </summary>
            <typeparam name="TArg">The <see cref="T:System.Type">type</see> of parameter to test.</typeparam>
            <typeparam name="TException">The <see cref="T:System.Type">type</see> of <see cref="T:System.ArgumentException" /> to expect.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="testMethod">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the <see cref="T:System.Action`1">test method</see>.</param>
            <param name="value">The <typeparamref name="TArg">value</typeparamref> that should cause the exception to be thrown.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">asserted exception</see>.</returns>
            <example>
    This example illustrates asserting an exception for an argument that is out of range.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        
        public class Person
        {
            public Person( int id )
            {
                if ( id < 0 )
                {
                    throw new ArgumentOutOfRangeException( "id", id, "The identifier must be greater than zero." );
                }
        
                Id = id;
            }
        
            public int Id { get; }
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ConstructorShouldNotAllowNullName()
            {
                Assert.ThrowsIfArgumentIsOutOfRange<int, ArgumentOutOfRangeException>( id => new Person( id ), -1, "An argument out of range exception was expected." );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1">
            <summary>
            Represents an asserter for exceptions.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> asserted <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1.Exception">exception</see>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1"/> class.
            </summary>
            <param name="exception">The <typeparamref name="T">exception</typeparamref> to assert.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExceptionAsserter`1.Exception">
            <summary>
            Gets the exception that was asserted.
            </summary>
            <value>An <typeparamref name="T">exception</typeparamref> object.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.AllItemsAreNotUnique">
            <summary>
              Looks up a localized string similar to The sequence contains one or more duplicate elements..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.AllPropertiesChangedNotRaised">
            <summary>
              Looks up a localized string similar to The PropertyChanged event was not raised for all properties..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.AllPropertiesChangedRaised">
            <summary>
              Looks up a localized string similar to The PropertyChanged event was raised for all properties..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.CollectionChangedActionNotExpected">
            <summary>
              Looks up a localized string similar to The expected collection change action was {0}, but the actual action is {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.CollectionChangedItemCountUnexpected">
            <summary>
              Looks up a localized string similar to The NotifyCollectionChangedEventArgs.{0} property was expected to have a count of {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.CollectionChangedItemUnexpected">
            <summary>
              Looks up a localized string similar to The expected item does not equal the actual item provided in the NotifyCollectionChangedEventArgs.{0} property..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.CollectionChangedMoreThanOnce">
            <summary>
              Looks up a localized string similar to The CollectionChanged event was raised more than once..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.CollectionChangedNewIndexNotExpected">
            <summary>
              Looks up a localized string similar to The expected new starting index was {0}, but the actual new starting index is {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.CollectionChangedNotRaised">
            <summary>
              Looks up a localized string similar to The CollectionChanged event was not raised..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.CollectionChangedNullItems">
            <summary>
              Looks up a localized string similar to The NotifyCollectionChangedEventArgs.{0} property was not expected to be null..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.CollectionChangedOldIndexNotExpected">
            <summary>
              Looks up a localized string similar to The expected old starting index was {0}, but the actual old starting index is {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.CollectionChangedWithItems">
            <summary>
              Looks up a localized string similar to The NotifyCollectionChangedEventArgs.{0} property was expected to be empty or null..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.CollectionCountUnexpected">
            <summary>
              Looks up a localized string similar to The expected collection count was {0}, but that actual count is {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.CollectionItemNotRemoved">
            <summary>
              Looks up a localized string similar to The specified item was not removed from the collection..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.ExceptionNotThrown">
            <summary>
              Looks up a localized string similar to An exception was expected, but not thrown..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.ExceptionOfTNotThrown">
            <summary>
              Looks up a localized string similar to An exception of type {0} was expected, but not thrown..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.ExpressionMustReferToPropertyOfDeclaredType">
            <summary>
              Looks up a localized string similar to The expression &apos;{0}&apos; must refer to a property declared by type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.ExpresssionMustReferToProperty">
            <summary>
              Looks up a localized string similar to The expression &apos;{0}&apos; must refer to a property..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.NullParameterToAssert">
            <summary>
              Looks up a localized string similar to The parameter &apos;{0}&apos; is invalid. The value cannot be null..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.PropertyChangedNotRaised">
            <summary>
              Looks up a localized string similar to The PropertyChanged event was not raised for property &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.PropertyChangedNotRaisedForExpectedProperties">
            <summary>
              Looks up a localized string similar to The PropertyChanged event was not raised for the following properties: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.PropertyChangedRaised">
            <summary>
              Looks up a localized string similar to The PropertyChanged event was raised for property &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.PropertyChangedRaisedForUnexpectedProperties">
            <summary>
              Looks up a localized string similar to The PropertyChanged event was raised, but not expected for the following properties: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.SequenceContains">
            <summary>
              Looks up a localized string similar to The sequence contains the element &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.SequenceDoesNotContain">
            <summary>
              Looks up a localized string similar to The sequence does not contain the element &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.SequenceIsNotSubsetOf">
            <summary>
              Looks up a localized string similar to The actual sequence is not a subset of the expected superset sequence..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.SequenceIsSubsetOf">
            <summary>
              Looks up a localized string similar to The actual sequence is a subset of the expected superset sequence..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.SequencesAreEqual">
            <summary>
              Looks up a localized string similar to The actual sequence is the same as the expected sequence..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.SequencesAreEquivalent">
            <summary>
              Looks up a localized string similar to The actual sequence is equivalent to the expected sequence..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.SequencesAreNotEqual">
            <summary>
              Looks up a localized string similar to The actual sequence is not the same as the expected sequence..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.SequencesAreNotEquivalent">
            <summary>
              Looks up a localized string similar to The actual sequence is not equivalent to the expected sequence..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.SomeItemsAreNull">
            <summary>
              Looks up a localized string similar to The sequence contains one or more null elements..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.WrongException">
            <summary>
              Looks up a localized string similar to The expected exception was {0}, but an exception of type {1} was thrown..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FailedTestMessage.WrongParameterName">
            <summary>
              Looks up a localized string similar to The excepted parameter associated with the exception was &apos;{0}&apos;, but &apos;{1}&apos; was supplied..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions">
            <summary>
            Provides assertion support for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AllItemsAreNotNull``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that all items in the specified sequence are not null. The assertion fails if any element is null.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for elements that are null.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element which is null is found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AllItemsAreNotNull``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Verifies that all items in the specified sequence are not null. The assertion fails if any element is null.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for elements that are null.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element which is null is found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AllItemsAreUnique``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that all items in the specified sequence are unique. The assertion fails if any two elements in the sequence are equal.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for duplicate elements.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Two or more equal elements are found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AllItemsAreUnique``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that all items in the specified sequence are unique. The assertion fails if any two elements in the sequence are equal.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for duplicate elements.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> used to compare elements.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Two or more equal elements are found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AllItemsAreUnique``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Verifies that all items in the specified sequence are unique. The assertion fails if any two elements in the sequence are equal.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for duplicate elements.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Two or more equal elements are found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AllItemsAreUnique``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Verifies that all items in the specified sequence are unique. The assertion fails if any two elements in the sequence are equal.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for duplicate elements.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> used to compare elements.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">Two or more equal elements are found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.SequenceEqual``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that two specified sequences are equal, using the specified method to compare the values of elements.
            The assertion fails if the sequences are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="expected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <remarks>Sequences that are equal must have the same elements, in the same order.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"><paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.SequenceEqual``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that two specified sequences are equal, using the specified method to compare the values of elements.
            The assertion fails if the sequences are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="expected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <remarks>Sequences that are equal must have the same elements, in the same order.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"><paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.SequenceEqual``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Verifies that two specified sequences are equal, using the specified method to compare the values of elements.
            The assertion fails if the sequences are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="expected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <remarks>Sequences that are equal must have the same elements, in the same order.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"><paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.SequenceEqual``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Verifies that two specified sequences are equal, using the specified method to compare the values of elements.
            The assertion fails if the sequences are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="expected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <remarks>Sequences that are equal must have the same elements, in the same order.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"><paramref name="expected" /> is not equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.SequenceNotEqual``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that two specified sequences are not equal, using the specified method to compare the values of elements.
            The assertion fails if the sequences are equal. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="notExpected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test does not expect to match <paramref name="actual" />.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <remarks>Sequences that are not equal must have different elements or be in different orders.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"><paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.SequenceNotEqual``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that two specified sequences are not equal, using the specified method to compare the values of elements.
            The assertion fails if the sequences are equal. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="notExpected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test does not expect to match <paramref name="actual" />.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <remarks>Sequences that are not equal must have different elements or be in different orders.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"><paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.SequenceNotEqual``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Verifies that two specified sequences are not equal, using the specified method to compare the values of elements.
            The assertion fails if the sequences are equal. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="notExpected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test does not expect to match <paramref name="actual" />.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <remarks>Sequences that are not equal must have different elements or be in different orders.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"><paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.SequenceNotEqual``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Verifies that two specified sequences are not equal, using the specified method to compare the values of elements.
            The assertion fails if the sequences are equal. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="notExpected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test does not expect to match <paramref name="actual" />.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <remarks>Sequences that are not equal must have different elements or be in different orders.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"><paramref name="notExpected" /> is equal to <paramref name="actual" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AreEquivalent``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that two specified sequences are equivalent. The assertion fails if the sequences are not equivalent.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="expected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <remarks>Sequences that are equivalent must have the same elements, but may be in a different order.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element was found in one of the sequences but not the other.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AreEquivalent``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that two specified sequences are equivalent. The assertion fails if the sequences are not equivalent.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="expected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <remarks>Sequences that are equivalent must have the same elements, but may be in a different order.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element was found in one of the sequences but not the other.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AreEquivalent``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Verifies that two specified sequences are equivalent. The assertion fails if the sequences are not equivalent.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="expected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <remarks>Sequences that are equivalent must have the same elements, but may be in a different order.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element was found in one of the sequences but not the other.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AreEquivalent``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Verifies that two specified sequences are equivalent. The assertion fails if the sequences are not equivalent.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="expected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test expects.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <remarks>Sequences that are equivalent must have the same elements, but may be in a different order.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element was found in one of the sequences but not the other.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AreNotEquivalent``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that two specified sequences are not equivalent. The assertion fails if the sequences are equivalent.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="notExpected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test expects to be different from the <paramref name="actual"/> sequence.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <remarks>Sequences are not equivalent if they contain different elements and in different orders.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">The two sequences contain the same elements, including the same number of duplicate occurrences of each element.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AreNotEquivalent``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that two specified sequences are not equivalent. The assertion fails if the sequences are equivalent.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="notExpected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test expects to be different from the <paramref name="actual"/> sequence.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <remarks>Sequences are not equivalent if they contain different elements and in different orders.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">The two sequences contain the same elements, including the same number of duplicate occurrences of each element.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AreNotEquivalent``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Verifies that two specified sequences are not equivalent. The assertion fails if the sequences are equivalent.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="expected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test expects to be different from the <paramref name="actual"/> sequence.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <param name="notExpected">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="notExpected" />.</param>
            <remarks>Sequences are not equivalent if they contain different elements and in different orders.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">The two sequences contain the same elements, including the same number of duplicate occurrences of each element.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.AreNotEquivalent``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Verifies that two specified sequences are not equivalent. The assertion fails if the sequences are equivalent.
            Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="notExpected">The first <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequence the unit test expects to be different from the <paramref name="actual"/> sequence.</param>
            <param name="actual">The second <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> to compare. This is the sequencce the unit test produced.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <remarks>Sequences are not equivalent if they contain different elements and in different orders.</remarks>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">The two sequences contain the same elements, including the same number of duplicate occurrences of each element.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.Contains``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Verifies that the specified sequence contains the specified element. The assertion fails if the element is not
            found in the sequence. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for the element.</param>
            <param name="element">The element that is expected to be in the sequence.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"><paramref name="element" /> is not found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.Contains``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that the specified sequence contains the specified element. The assertion fails if the element is not
            found in the sequence. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for the element.</param>
            <param name="element">The element that is expected to be in the sequence.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"><paramref name="element" /> is not found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.Contains``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},``0,System.String,System.Object[])">
            <summary>
            Verifies that the specified sequence contains the specified element. The assertion fails if the element is not
            found in the sequence. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for the element.</param>
            <param name="element">The element that is expected to be in the sequence.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"><paramref name="element" /> is not found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.Contains``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Verifies that the specified sequence contains the specified element. The assertion fails if the element is not
            found in the sequence. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for the element.</param>
            <param name="element">The element that is expected to be in the sequence.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"><paramref name="element" /> is not found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.DoesNotContain``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Verifies that the specified sequence does not contain the specified element. The assertion fails if the element is
            found in the sequence. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for the element.</param>
            <param name="element">The element that is not expected to be in the sequence.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="element" /> is found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.DoesNotContain``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that the specified sequence does not contain the specified element. The assertion fails if the element is
            found in the sequence. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for the element.</param>
            <param name="element">The element that is not expected to be in the sequence.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="element" /> is found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.DoesNotContain``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},``0,System.String,System.Object[])">
            <summary>
            Verifies that the specified sequence does not contain the specified element. The assertion fails if the element is
            found in the sequence. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for the element.</param>
            <param name="element">The element that is not expected to be in the sequence.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="element" /> is found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.DoesNotContain``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Verifies that the specified sequence does not contain the specified element. The assertion fails if the element is
            found in the sequence. Displays a message if the assertion fails, and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> in which to search for the element.</param>
            <param name="element">The element that is not expected to be in the sequence.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
              <paramref name="element" /> is found in <paramref name="sequence" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.IsSubsetOf``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that the first sequence is a subset of the second sequence. Displays a message if the assertion fails,
            and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="subset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> expected to be a superset of <paramref name="subset" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="subset" /> is not found in <paramref name="superset" /> or
            an element in <paramref name="subset" /> is not found in <paramref name="superset" /> in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.IsSubsetOf``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that the first sequence is a subset of the second sequence. Displays a message if the assertion fails,
            and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="subset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> expected to be a superset of <paramref name="subset" />.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="subset" /> is not found in <paramref name="superset" /> or
            an element in <paramref name="subset" /> is not found in <paramref name="superset" /> in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.IsSubsetOf``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Verifies that the first sequence is a subset of the second sequence. Displays a message if the assertion fails,
            and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="subset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> expected to be a superset of <paramref name="subset" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="subset" /> is not found in <paramref name="superset" /> or
            an element in <paramref name="subset" /> is not found in <paramref name="superset" /> in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.IsSubsetOf``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Verifies that the first sequence is a subset of the second sequence. Displays a message if the assertion fails,
            and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="subset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> expected to be a superset of <paramref name="subset" />.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">An element in <paramref name="subset" /> is not found in <paramref name="superset" /> or
            an element in <paramref name="subset" /> is not found in <paramref name="superset" /> in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.IsNotSubsetOf``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that the first sequence is not a subset of the second sequence. Displays a message if the assertion fails,
            and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="subset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> not expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> not expected to be a superset of <paramref name="subset" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">All elements in <paramref name="subset" /> are found in <paramref name="superset" /> and are found in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.IsNotSubsetOf``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that the first sequence is not a subset of the second sequence. Displays a message if the assertion fails,
            and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="subset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> not expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> not expected to be a superset of <paramref name="subset" />.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">All elements in <paramref name="subset" /> are found in <paramref name="superset" /> and are found in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.IsNotSubsetOf``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Verifies that the first sequence is not a subset of the second sequence. Displays a message if the assertion fails,
            and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="subset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> not expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> not expected to be a superset of <paramref name="subset" />.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">All elements in <paramref name="subset" /> are found in <paramref name="superset" /> and are found in sufficient quantity.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnumerableExtensions.IsNotSubsetOf``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Verifies that the first sequence is not a subset of the second sequence. Displays a message if the assertion fails,
            and applies the specified formatting to it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see>.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/>.</param>
            <param name="subset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> not expected to be a subset of <paramref name="superset" />.</param>
            <param name="superset">The <see cref="T:System.Collections.Generic.IEnumerable`1">sequence</see> not expected to be a superset of <paramref name="subset" />.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">comparer</see> implementation to use when comparing elements of the sequence.</param>
            <param name="message">A message to display if the assertion fails. This message can be seen in the unit test results.</param>
            <param name="parameters">An array of parameters to use when formatting <paramref name="message" />.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">All elements in <paramref name="subset" /> are found in <paramref name="superset" /> and are found in sufficient quantity.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions">
            <summary>
            Provides assertion support for <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.AddChangedCollection``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,``1)">
            <summary>
            Asserts that the <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">add</see> method adds the specified element to a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> events.
            </summary>
            <typeparam name="TCollection">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <typeparam name="TItem">The <see cref="T:System.Type">type</see> of item in the collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1">collection</see> to test.</param>
            <param name="item">The <typeparamref name="TItem">item</typeparamref> to add to the collection.</param>
            <example>
    This example illustrates asserting that adding an element to a collection raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void AddShouldInsertElementIntoCollection()
            {
                var target = new ObservableCollection<int>();
                Assert.AddChangedCollection( target, 1 );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.AddChangedCollection``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,``1,System.Int32)">
            <summary>
            Asserts that the <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">add</see> method adds the specified element to a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> events.
            </summary>
            <typeparam name="TCollection">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <typeparam name="TItem">The <see cref="T:System.Type">type</see> of item in the collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1">collection</see> to test.</param>
            <param name="item">The <typeparamref name="TItem">item</typeparamref> to add to the collection.</param>
            <param name="expectedIndex">The zero-based index where the insertion of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <example>
    This example illustrates asserting that adding an element to a collection raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void AddShouldInsertElementIntoCollection()
            {
                var target = new ObservableCollection<int>();
                Assert.AddChangedCollection( target, 1, 0 );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.AddChangedCollection``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,``1,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">add</see> method adds the specified element to a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TCollection">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <typeparam name="TItem">The <see cref="T:System.Type">type</see> of item in the collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1">collection</see> to test.</param>
            <param name="item">The <typeparamref name="TItem">item</typeparamref> to add to the collection.</param>
            <param name="changedProperties">The sequence of <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the
            collection properties that are expected to change.</param>
            <example>
    This example illustrates asserting that adding an element to a collection raises the appropriate events.
    An indexer expression translates to a property named "Item[]".
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void AddShouldInsertElementIntoCollection()
            {
                var target = new ObservableCollection<int>();
                Assert.AddChangedCollection( target, 1, c => c.Count, c => c[0] );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.AddChangedCollection``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,``1,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">add</see> method adds the specified element to a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TCollection">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <typeparam name="TItem">The <see cref="T:System.Type">type</see> of item in the collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1">collection</see> to test.</param>
            <param name="item">The <typeparamref name="TItem">item</typeparamref> to add to the collection.</param>
            <param name="expectedIndex">The zero-based index where the insertion of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <param name="changedProperties">The sequence of <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the
            collection properties that are expected to change.</param>
            <example>
    This example illustrates asserting that adding an element to a collection raises the appropriate events.
    An indexer expression translates to a property named "Item[]".
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void AddShouldInsertElementIntoCollection()
            {
                var target = new ObservableCollection<int>();
                Assert.AddChangedCollection( target, 1, 0, c => c.Count, c => c[0] );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.AddChangedCollection``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Object)">
            <summary>
            Asserts that the <see cref="M:System.Collections.IList.Add(System.Object)">add</see> method adds a new element into a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> events.
            </summary>
            <typeparam name="TList">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.IList">collection</see> to test.</param>
            <param name="item">The item to add to the collection.</param>
            <example>
    This example illustrates asserting that adding an element to a collection raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void AddShouldInsertElementIntoCollection()
            {
                var target = new ObservableCollection<int>();
                Assert.AddChangedCollection( target, 1 );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.AddChangedCollection``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Object,System.Int32)">
            <summary>
            Asserts that the <see cref="M:System.Collections.IList.Add(System.Object)">add</see> method adds a new element into a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> events.
            </summary>
            <typeparam name="TList">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.IList">collection</see> to test.</param>
            <param name="item">The item to add to the collection.</param>
            <param name="expectedIndex">The zero-based index where the insertion of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <example>
    This example illustrates asserting that adding an element to a collection raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void AddShouldInsertElementIntoCollection()
            {
                var target = new ObservableCollection<int>();
                Assert.AddChangedCollection( target, 1, 0 );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.AddChangedCollection``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the <see cref="M:System.Collections.IList.Add(System.Object)">add</see> method adds a new element into a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TList">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.IList">collection</see> to test.</param>
            <param name="item">The item to add to the collection.</param>
            <param name="changedProperties">The sequence of <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the
            collection properties that are expected to change.</param>
            <example>
    This example illustrates asserting that adding an element to a collection raises the appropriate events.
    An indexer expression translates to a property named "Item[]".
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void AddShouldInsertElementIntoCollection()
            {
                var target = new ObservableCollection<int>();
                Assert.AddChangedCollection( target, 1, c => c.Count, c => c[0] );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.AddChangedCollection``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Object,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the <see cref="M:System.Collections.IList.Add(System.Object)">add</see> method adds a new element into a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TList">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.IList">collection</see> to test.</param>
            <param name="item">The item to add to the collection.</param>
            <param name="expectedIndex">The zero-based index where the insertion of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <param name="changedProperties">The sequence of <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the
            collection properties that are expected to change.</param>
            <example>
    This example illustrates asserting that adding an element to a collection raises the appropriate events.
    An indexer expression translates to a property named "Item[]".
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void AddShouldInsertElementIntoCollection()
            {
                var target = new ObservableCollection<int>();
                Assert.AddChangedCollection( target, 1, 0, c => c.Count, c => c[0] );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.RemoveChangedCollection``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,``1,System.Int32)">
            <summary>
            Asserts that the <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)">remove</see> method removes the specified element from a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> events.
            </summary>
            <typeparam name="TCollection">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <typeparam name="TItem">The <see cref="T:System.Type">type</see> of item in the collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1">collection</see> to test.</param>
            <param name="item">The <typeparamref name="TItem">item</typeparamref> to remove from the collection.</param>
            <param name="expectedIndex">The zero-based index where the insertion of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <example>
    This example illustrates asserting that removing an element from a collection raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void RemoveShouldRemoveElementFromCollection()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.RemoveChangedCollection( target, 2, 1 );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.RemoveChangedCollection``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,``1,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)">remove</see> method removes the specified element to a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TCollection">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <typeparam name="TItem">The <see cref="T:System.Type">type</see> of item in the collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1">collection</see> to test.</param>
            <param name="item">The <typeparamref name="TItem">item</typeparamref> to remove from the collection.</param>
            <param name="expectedIndex">The zero-based index where the insertion of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <param name="changedProperties">The sequence of <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the
            collection properties that are expected to change.</param>
            <example>
    This example illustrates asserting that removing an element from a collection raises the appropriate events.
    An indexer expression translates to a property named "Item[]".
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void RemoveShouldRemoveElementFromCollection()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.RemoveChangedCollection( target, 2, 1, c => c.Count, c => c[0] );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.RemoveChangedCollection``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Object,System.Int32)">
            <summary>
            Asserts that the <see cref="M:System.Collections.IList.Remove(System.Object)">remove</see> method removes a new element into a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> events.
            </summary>
            <typeparam name="TList">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.IList">collection</see> to test.</param>
            <param name="item">The item to remove from the collection.</param>
            <param name="expectedIndex">The zero-based index where the insertion of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <example>
    This example illustrates asserting that removing an element from a collection raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void RemoveShouldRemoveElementFromCollection()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.RemoveChangedCollection( target, 2, 1 );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.RemoveChangedCollection``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Object,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the <see cref="M:System.Collections.IList.Remove(System.Object)">remove</see> method removes a new element into a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TList">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.IList">collection</see> to test.</param>
            <param name="item">The item to remove from the collection.</param>
            <param name="expectedIndex">The zero-based index where the insertion of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <param name="changedProperties">The sequence of <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the
            collection properties that are expected to change.</param>
            <example>
    This example illustrates asserting that removing an element from a collection raises the appropriate events.
    An indexer expression translates to a property named "Item[]".
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void RemoveShouldRemoveElementFromCollection()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.RemoveChangedCollection( target, 2, 1, c => c.Count, c => c[0] );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.InsertChangedCollection``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,``1,System.Int32)">
            <summary>
            Asserts that the <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">insert</see> method inserts the specified element into a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TCollection">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <typeparam name="TItem">The <see cref="T:System.Type">type</see> of item in the collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.IList`1">collection</see> to test.</param>
            <param name="item">The <typeparamref name="TItem">item</typeparamref> to insert into the collection.</param>
            <param name="index">The zero-based index where the insertion of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <example>
    This example illustrates asserting that inserting an element into a collection raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void InsertShouldAddElementIntoCollectionAtSpecifiedIndex()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.InsertChangedCollection( target, 4, 1 );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.InsertChangedCollection``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,``1,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">insert</see> method inserts the specified element into a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TCollection">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <typeparam name="TItem">The <see cref="T:System.Type">type</see> of item in the collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.IList`1">collection</see> to test.</param>
            <param name="item">The <typeparamref name="TItem">item</typeparamref> to insert into the collection.</param>
            <param name="index">The zero-based index where the insertion of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <param name="changedProperties">The sequence of <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the
            collection properties that are expected to change.</param>
            <example>
    This example illustrates asserting that inserting an element into a collection raises the appropriate events.
    An indexer expression translates to a property named "Item[]".
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void InsertShouldAddElementIntoCollectionAtSpecifiedIndex()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.InsertChangedCollection( target, 4, 1, c => c.Count, c => c[0] );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.InsertChangedCollection``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Object,System.Int32)">
            <summary>
            Asserts that the <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)">insert</see> method inserts the specified element into a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> events.
            </summary>
            <typeparam name="TList">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.IList">collection</see> to test.</param>
            <param name="item">The item to insert into the collection.</param>
            <param name="index">The zero-based index where the insertion of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <example>
    This example illustrates asserting that inserting an element into a collection raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void InsertShouldAddElementIntoCollectionAtSpecifiedIndex()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.InsertChangedCollection( target, 4, 1 );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.InsertChangedCollection``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Object,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)">insert</see> method inserts the specified element into a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TList">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.IList">collection</see> to test.</param>
            <param name="item">The item to insert into the collection.</param>
            <param name="index">The zero-based index where the insertion of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <param name="changedProperties">The sequence of <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the
            collection properties that are expected to change.</param>
            <example>
    This example illustrates asserting that inserting an element into a collection raises the appropriate events.
    An indexer expression translates to a property named "Item[]".
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void InsertShouldAddElementIntoCollectionAtSpecifiedIndex()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.InsertChangedCollection( target, 4, 1, c => c.Count, c => c[0] );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.IndexerChangedCollection``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,``1,System.Int32)">
            <summary>
            Asserts that the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)">indexer</see> replaces the specified element in a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TCollection">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <typeparam name="TItem">The <see cref="T:System.Type">type</see> of item in the collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.IList`1">collection</see> to test.</param>
            <param name="item">The <typeparamref name="TItem">item</typeparamref> to replace the collection.</param>
            <param name="index">The zero-based index where the replacement of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <example>
    This example illustrates asserting that replacing an element in a collection raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void IndexerShouldReplaceElementInCollectionAtSpecifiedIndex()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.IndexerChangedCollection( target, 4, 0 );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.IndexerChangedCollection``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,``1,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)">index</see> replaces the specified element in a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TCollection">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <typeparam name="TItem">The <see cref="T:System.Type">type</see> of item in the collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.IList`1">collection</see> to test.</param>
            <param name="item">The <typeparamref name="TItem">item</typeparamref> to replace in the collection.</param>
            <param name="index">The zero-based index where the replacement of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <param name="changedProperties">The sequence of <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the
            collection properties that are expected to change.</param>
            <example>
    This example illustrates asserting that replacing an element in a collection raises the appropriate events.
    An indexer expression translates to a property named "Item[]".
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void IndexerShouldReplaceElementInCollectionAtSpecifiedIndex()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.IndexerChangedCollection( target, 4, 0, c => c.Count, c => c[0] );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.IndexerChangedCollection``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Object,System.Int32)">
            <summary>
            Asserts that the <see cref="P:System.Collections.IList.Item(System.Int32)">indexer</see> replaces the specified element in a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> events.
            </summary>
            <typeparam name="TList">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.IList">collection</see> to test.</param>
            <param name="item">The item to replace in the collection.</param>
            <param name="index">The zero-based index where the replacement of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <example>
    This example illustrates asserting that replacing an element in a collection raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void IndexerShouldReplaceElementInCollectionAtSpecifiedIndex()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.IndexerChangedCollection( target, 4, 0 );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.IndexerChangedCollection``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Object,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the <see cref="P:System.Collections.IList.Item(System.Int32)">indexer</see> replaces the specified element in a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TList">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.IList">collection</see> to test.</param>
            <param name="item">The item to replace in the collection.</param>
            <param name="index">The zero-based index where the replacement of the <paramref name="item" /> is expected to
            take place in the <paramref name="collection" />.</param>
            <param name="changedProperties">The sequence of <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the
            collection properties that are expected to change.</param>
            <example>
    This example illustrates asserting that replacing an element in a collection raises the appropriate events.
    An indexer expression translates to a property named "Item[]".
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void IndexerShouldReplaceElementInCollectionAtSpecifiedIndex()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.IndexerChangedCollection( target, 4, 0, c => c.Count, c => c[0] );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.ClearChangedCollection``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0)">
            <summary>
            Asserts that the <see cref="M:System.Collections.Generic.ICollection`1.Clear">clear</see> method removes all the elements from a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> events.
            </summary>
            <typeparam name="TCollection">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <typeparam name="TItem">The <see cref="T:System.Type">type</see> of item in the collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1">collection</see> to test.</param>
            <example>
    This example illustrates asserting that clearing a collection raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ClearShouldRemoveItemsFromCollection()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.ClearChangedCollection( target );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.ClearChangedCollection``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the <see cref="M:System.Collections.Generic.ICollection`1.Clear">clear</see> method removes all the elements from a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TCollection">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <typeparam name="TItem">The <see cref="T:System.Type">type</see> of item in the collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1">collection</see> to test.</param>
            <param name="changedProperties">The sequence of <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the
            collection properties that are expected to change.</param>
            <example>
    This example illustrates asserting that clearing a collection raises the appropriate events.
    An indexer expression translates to a property named "Item[]".
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ClearShouldRemoveItemsFromCollection()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.ClearChangedCollection( target, c => c.Count, c => c[0] );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.ClearChangedCollection``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0)">
            <summary>
            Asserts that the <see cref="M:System.Collections.IList.Clear">clear</see> method removes all the elements from a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> events.
            </summary>
            <typeparam name="TList">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.IList">collection</see> to test.</param>
            <example>
    This example illustrates asserting that clearing a collection raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ClearShouldRemoveItemsFromCollection()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.ClearChangedCollection( target );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyCollectionChangedExtensions.ClearChangedCollection``1(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the <see cref="M:System.Collections.IList.Clear">clear</see> method removes all the elements from a collection
            and raises the appropriate <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> and <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> events.
            </summary>
            <typeparam name="TList">The <see cref="T:System.Type">type</see> of collection to test.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="collection">The <see cref="T:System.Collections.IList">collection</see> to test.</param>
            <param name="changedProperties">The sequence of <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the
            collection properties that are expected to change.</param>
            <example>
    This example illustrates asserting that clearing a collection raises the appropriate events.
    An indexer expression translates to a property named "Item[]".
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.Collections.Generic;
        using System.Collections.Specialized;
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void ClearShouldRemoveItemsFromCollection()
            {
                var target = new ObservableCollection<int>(){ 1, 2, 3 };
                Assert.ClearChangedCollection( target, c => c.Count, c => c[0] );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyPropertyChangedExtensions">
            <summary>
            Provides assertion support for <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyPropertyChangedExtensions.PropertyChanged``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Asserts that the specified object raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event for the specified property.
            </summary>
            <typeparam name="TObject">The <see cref="T:System.Type">type</see> of <see cref="T:System.ComponentModel.INotifyPropertyChanged">object</see> to test.</typeparam>
            <typeparam name="TValue">The <see cref="T:System.Type">type</see> of value to assign to the property.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="subject">The <see cref="T:System.ComponentModel.INotifyPropertyChanged">object</see> to test.</param>
            <param name="testProperty">The <see cref="T:System.Linq.Expressions.Expression`1" /> representing the test property.</param>
            <param name="value">The value to to assign to the tested property.</param>
            <param name="otherProperties">A sequence of other property <see cref="T:System.Linq.Expressions.Expression`1">expressions</see> representing the additional properties
            that are expected to change and raise the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event as a result of changing the
            <paramref name="testProperty">tested property</paramref>.</param>
            <example>
    This example illustrates asserting that updating a property raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.ComponentModel;
        
        public class Person : INotifyPropertyChanged
        {
            private string name;
        
            public string Name
            {
                get => name;
                set
                {
                    if ( name == value )
                    {
                        return;
                    }
        
                    name = value;
                    OnPropertyChanged( new PropertyChangedEventArgs( "Name" ) );
                }
            }
        
            public event PropertyChangedEventHandler PropertyChanged;
            
            protected virtual void OnPropertyChanged( PropertyChangedEventArgs e ) => PropertyChanged?.Invoke( this, e );
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void NamePropertyShouldRaisePropertyChangedWhenUpdated()
            {
                var target = new Person();
                var expected = "Bob";
                Assert.PropertyChanged( target, p => p.Name, expected );
                Assert.AreEqual( expected, target.Name );
            }
        }
        ]]>
    </code>
   </example><example>
    This example illustrates asserting that updating a property raises the appropriate events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.ComponentModel;
        
        public class Person : INotifyPropertyChanged
        {
            private string first;
            private string last;
        
            public string FirstName
            {
                get => first;
                set
                {
                    if ( first == value )
                    {
                        return;
                    }
                    
                    first = value;
                    OnPropertyChanged( new PropertyChangedEventArgs( nameof( FirstName ) ) );
                    OnPropertyChanged( new PropertyChangedEventArgs( nameof( FullName ) ) );
                }
            }
        
            public string LastName
            {
                get => last;
                set
                {
                    if ( last == value )
                    {
                        return;
                    }
        
                    last = value;
                    OnPropertyChanged( new PropertyChangedEventArgs( nameof( FirstName ) ) );
                    OnPropertyChanged( new PropertyChangedEventArgs( nameof( FullName ) ) );
                }
            }
        
            public string FullName => $"{FirstName} {LastName}";
        
            public event PropertyChangedEventHandler PropertyChanged;
            
            protected virtual void OnPropertyChanged( PropertyChangedEventArgs e ) => PropertyChanged?.Invoke( this, e );
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void NamePropertyShouldRaisePropertyChangedWhenUpdated()
            {
                var target = new Person();
                var expected = "Bob";
                Assert.PropertyChanged( target, p => p.Name, expected, p => p.FullName );
                Assert.AreEqual( expected, target.Name );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.INotifyPropertyChangedExtensions.PropertyNotChanged``2(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Asserts that the specified object does not raise the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
            </summary>
            <typeparam name="TObject">The <see cref="T:System.Type">type</see> of <see cref="T:System.ComponentModel.INotifyPropertyChanged">object</see> to test.</typeparam>
            <typeparam name="TValue">The <see cref="T:System.Type">type</see> of value to assign to the property.</typeparam>
            <param name="assert">The extended <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter" />.</param>
            <param name="subject">The <see cref="T:System.ComponentModel.INotifyPropertyChanged">object</see> to test.</param>
            <param name="testProperty">The <see cref="T:System.Linq.Expressions.Expression`1">expression</see> representing the test property.</param>
            <param name="value">The value to to assign to the tested property.</param>
            <example>
    This example illustrates asserting that updating a property does not raise any events.
    <code lang="C#">
     <![CDATA[
        using Microsoft.VisualStudio.TestTools.UnitTesting;
        using System;
        using System.ComponentModel;
        
        public class Person : INotifyPropertyChanged
        {
            private string name;
        
            public string Name
            {
                get => name;
                set
                {
                    if ( name == value )
                    {
                        return;
                    }
        
                    name = value;
                    OnPropertyChanged( new PropertyChangedEventArgs( nameof( Name ) ) );
                }
            }
        
            public event PropertyChangedEventHandler PropertyChanged;
            
            protected virtual void OnPropertyChanged( PropertyChangedEventArgs e ) => PropertyChanged?.Invoke( this, e );
        }
        
        [TestClass]
        public class PersonTest : UnitTest
        {
            [TestMethod]
            public void NamePropertyShouldNotRaisePropertyChangedWhenValueIsUnchanged()
            {
                var target = new Person();
                var expected = "Bob";
                var target.Name = expected;
                Assert.PropertyNotChanged( target, p => p.Name, expected );
            }
        }
        ]]>
    </code>
   </example>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest">
             <summary>
             Represents the properties and methods that are needed to perform a unit test.
             </summary>
             <example>This example demonstrates how to create a unit test where test assertions can be extended.
             <code lang="C#"><![CDATA[
             namespace MyTests
             {
                 using Microsoft.VisualStudio.TestTools.UnitTesting;
                 using System;
                 using System.Collections.Generic;
                 using System.Linq;
            
                 [TestClass]
                 public class MyTestClass : UnitTest
                 {
                     [TestMethod]
                     public void ExampleTest
                     {
                         // Assert is an instance property of the UnitTest class which can be extended with extension methods
                         Assert.Inconclusive();
                     }
                 }
             }
             ]]></code></example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.Asserter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest"/> class.
            </summary>
            <param name="assert">The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter">asserter</see> used for testing.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest.Assert">
            <summary>
            Gets or sets the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter"/> object that provides support for unit testing.
            </summary>
            <value>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Asserter">asserter</see> object that is associated with the unit test.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest.CollectionAssert">
            <summary>
            Gets or sets the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter"/> object that provides support for unit testing.
            </summary>
            <value>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAsserter">collection asserter</see> object that is associated with the unit test.</value>
        </member>
    </members>
</doc>
